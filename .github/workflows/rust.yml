name: Rust CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  VERSION: "0.1.0"

jobs:
  build:
    strategy:
      matrix:
        os: [
          ubuntu-latest,
          ubuntu-22.04-arm,
          windows-latest,
          windows-11-arm,
          macos-latest,
          macos-13
        ]
        build_mode: [release, debug]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Build
        run: |
          if [[ "${{ matrix.build_mode }}" == "release" ]]; then
            cargo build --release
          else
            cargo build
          fi
        shell: bash

      - name: Prepare artifact name
        id: prep
        run: |
          BIN_NAME="myonsandbox"
          OS_NAME=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
          case "${{ matrix.os }}" in
            *-arm) ARCH_NAME="aarch64" ;;
            *) ARCH_NAME="x86_64" ;;
          esac
          MODE="${{ matrix.build_mode }}"
          VERSION="${{ env.VERSION }}"
          ARCHIVE_NAME="${BIN_NAME}-${MODE}-${OS_NAME}_${ARCH_NAME}-${VERSION}"
          echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
        shell: bash

      - name: Archive binary
        run: |
          mkdir output
          cp target/${{ matrix.build_mode }}/myonsandbox* output/

          EXT=""
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            EXT="zip"
            7z a "${{ steps.prep.outputs.archive_name }}.${EXT}" ./output/*
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            EXT="zip"
            zip -r "${{ steps.prep.outputs.archive_name }}.${EXT}" output
          else
            EXT="tar.xz"
            tar -cJf "${{ steps.prep.outputs.archive_name }}.${EXT}" output
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prep.outputs.archive_name }}
          path: |
            *.zip
            *.tar.xz
