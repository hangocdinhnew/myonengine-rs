name: Rust CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_mode: [release, debug]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Build
        run: cargo build ${{ matrix.build_mode == 'release' && '--release' || '' }}

      - name: Prepare artifact name
        id: prep
        run: |
          OS_NAME=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
          ARCH_NAME=$(uname -m)
          MODE="${{ matrix.build_mode }}"

          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            VERSION="${GITHUB_REF#refs/heads/}"
            VERSION=$(echo "$VERSION" | tr '/' '-')
          fi

          ARCHIVE_NAME="${MODE}-${OS_NAME}_${ARCH_NAME}-${VERSION}"
          echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
        shell: bash

      - name: Archive binary
        run: |
          mkdir myonengine-${{ steps.prep.outputs.archive_name }}
          cp target/${{ matrix.build_mode }}/myonsandbox myonengine-${{ steps.prep.outputs.archive_name }}/

          EXT=""
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            EXT="zip"
            7z a "myonengine-${{ steps.prep.outputs.archive_name }}.${EXT}" ./myonengine-${{ steps.prep.outputs.archive_name }}/*
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            EXT="zip"
            zip -r "myonengine-${{ steps.prep.outputs.archive_name }}.${EXT}" myonengine-${{ steps.prep.outputs.archive_name }}
          else
            EXT="tar.xz"
            tar -cJf "myonengine-${{ steps.prep.outputs.archive_name }}.${EXT}" myonengine-${{ steps.prep.outputs.archive_name }}
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prep.outputs.archive_name }}
          path: |
            *.zip
            *.tar.xz


  release:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display artifact structure
        run: ls -R ./artifacts

      - name: Create or update GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: continuous
          name: "Continuous Build"
          body: |
            Latest artifacts built from `main`.

            This release is updated every time a new commit is pushed to `main`.
          draft: false
          prerelease: true
          files: ./artifacts/**/*.zip
            ./artifacts/**/*.tar.xz
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
