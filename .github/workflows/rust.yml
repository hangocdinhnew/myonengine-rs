name: Rust CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_mode: [release, debug]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Build
        run: cargo build ${{ matrix.build_mode == 'release' && '--release' || '' }}

      - name: Prepare artifact name
        id: prep
        run: |
          OS_NAME=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
          ARCH_NAME=$(uname -m)
          MODE="${{ matrix.build_mode }}"

          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            VERSION="${GITHUB_REF#refs/heads/}"
            VERSION=$(echo "$VERSION" | tr '/' '-')
          fi

          ARCHIVE_NAME="${MODE}-${OS_NAME}_${ARCH_NAME}-${VERSION}"
          echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
        shell: bash

      - name: Archive binary
        run: |
          mkdir myonengine-${{ steps.prep.outputs.archive_name }}
          cp target/${{ matrix.build_mode }}/myonsandbox myonengine-${{ steps.prep.outputs.archive_name }}/

          EXT=""
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            EXT="zip"
            7z a "myonengine-${{ steps.prep.outputs.archive_name }}.${EXT}" ./myonengine-${{ steps.prep.outputs.archive_name }}/*
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            EXT="zip"
            zip -r "myonengine-${{ steps.prep.outputs.archive_name }}.${EXT}" myonengine-${{ steps.prep.outputs.archive_name }}
          else
            EXT="tar.xz"
            tar -cJf "myonengine-${{ steps.prep.outputs.archive_name }}.${EXT}" myonengine-${{ steps.prep.outputs.archive_name }}
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prep.outputs.archive_name }}
          path: |
            *.zip
            *.tar.xz

  # Taken from Xash3D-FWGS (Thanks!)
  release:
    name: "Upload releases"
    runs-on: ubuntu-latest
    needs: [build, flatpak]
    if: ${{ github.event_name == 'push' }}

    steps:
    - name: Remove old release, fetch artifacts, repackage binaries and upload new release
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
        RELEASE_TAG: ${{ github.ref_name == 'main' && 'continuous' || format('continuous-{0}', github.ref_name) }}

      run: |
        gh release delete "$RELEASE_TAG" \
          --yes \
          --cleanup-tag \
          --repo "$GITHUB_REPOSITORY" || true

        gh run download "$GITHUB_RUN_ID" \
          --dir artifacts/ \
          --repo "$GITHUB_REPOSITORY"

        pushd artifacts/
        echo "Found artifacts:"
        ls
        for i in $(find -mindepth 1 -maxdepth 1 -type d); do
          mv "$i"/* .
          rm -rf "$i"
        done
        echo "Repackaged artifacts:"
        ls -R
        popd
        sleep 20s
        gh release create "$RELEASE_TAG" artifacts/* \
          --title "myonengine-rs Continuous ${{ github.ref_name }} Build" \
          --target $GITHUB_SHA \
          --repo "$GITHUB_REPOSITORY" \
          --prerelease
